version: '3.9'

services:
  # Redis for Memory Store
  redis:
    image: redis:7-alpine
    container_name: soluto-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 2gb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # PostgreSQL for Persistent Storage
  postgres:
    image: postgres:16-alpine
    container_name: soluto-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: soluto_agents
      POSTGRES_USER: soluto
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-soluto2024}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U soluto"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Main Application
  app:
    build:
      context: .
      dockerfile: Dockerfile.prod
      args:
        PYTHON_VERSION: "3.11"
    container_name: soluto-app
    restart: unless-stopped
    ports:
      - "2024:2024"
    environment:
      - REDIS_URL=redis://redis:6379/0
      - DATABASE_URL=postgresql+asyncpg://soluto:${POSTGRES_PASSWORD:-soluto2024}@postgres:5432/soluto_agents
      - API_HOST=0.0.0.0
      - API_PORT=2024
      - LOG_LEVEL=INFO
      - PYTHONUNBUFFERED=1
      - LANGCHAIN_TRACING_V2=${LANGCHAIN_TRACING_V2:-true}
      - LANGCHAIN_ENDPOINT=${LANGCHAIN_ENDPOINT:-https://api.smith.langchain.com}
      - LANGCHAIN_API_KEY=${LANGCHAIN_API_KEY}
      - LANGCHAIN_PROJECT=${LANGCHAIN_PROJECT:-soluto-regulatory-agents}
    env_file:
      - .env
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:2024/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # LangSmith Monitoring (Optional - remove if not using LangSmith)
  # Uncomment below if you want to run a local LangSmith instance
  # langgraph-studio:
  #   image: langchain/langgraph-studio:latest
  #   container_name: soluto-langgraph-studio
  #   restart: unless-stopped
  #   ports:
  #     - "8123:8123"
  #   environment:
  #     - LANGCHAIN_API_KEY=${LANGCHAIN_API_KEY}
  #     - LANGCHAIN_ENDPOINT=${LANGCHAIN_ENDPOINT:-https://api.smith.langchain.com}
  #   depends_on:
  #     - app

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: soluto-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'

  # Grafana for Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: soluto-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_SERVER_ROOT_URL=http://localhost:3000
    volumes:
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: soluto-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
      - langgraph-studio
      - grafana

volumes:
  redis_data:
  postgres_data:
  prometheus_data:
  grafana_data: