#!/bin/bash

# Quick Start Script - Soluto Regulatory Agents
# Este script automatiza o processo de deploy inicial

set -e

echo "üöÄ Iniciando Deploy do Sistema Soluto Regulatory Agents..."
echo "=================================================="

# Verificar se .env existe
if [ ! -f .env ]; then
    echo "üìù Criando arquivo .env..."
    cp .env.example .env
    echo "‚ö†Ô∏è  IMPORTANTE: Edite o arquivo .env e adicione suas API keys!"
    echo "   - OPENAI_API_KEY"
    echo "   - PERPLEXITY_API_KEY"
    echo "   - LANGCHAIN_API_KEY (opcional)"
    echo ""
    echo "Pressione ENTER ap√≥s configurar o .env..."
    read
fi

# Verificar Docker
if ! command -v docker &> /dev/null; then
    echo "‚ùå Docker n√£o encontrado. Por favor, instale o Docker primeiro."
    exit 1
fi

if ! command -v docker-compose &> /dev/null; then
    echo "‚ùå Docker Compose n√£o encontrado. Por favor, instale o Docker Compose primeiro."
    exit 1
fi

# Dar permiss√£o aos scripts
echo "üîß Configurando permiss√µes..."
chmod +x scripts/*.sh

# Parar containers existentes
echo "üõë Parando containers existentes..."
docker-compose -f docker-compose.prod.yml down 2>/dev/null || true

# Build e deploy
echo "üèóÔ∏è  Construindo imagens Docker..."
docker-compose -f docker-compose.prod.yml build

echo "üöÄ Iniciando containers..."
docker-compose -f docker-compose.prod.yml up -d

# Aguardar servi√ßos iniciarem
echo "‚è≥ Aguardando servi√ßos iniciarem..."
sleep 10

# Verificar sa√∫de do sistema
echo "üè• Verificando sa√∫de do sistema..."
max_attempts=30
attempt=1

while [ $attempt -le $max_attempts ]; do
    if curl -f http://localhost:2024/health &>/dev/null; then
        echo "‚úÖ Sistema est√° saud√°vel!"
        break
    else
        echo "‚è≥ Aguardando sistema iniciar... (tentativa $attempt/$max_attempts)"
        sleep 2
        attempt=$((attempt + 1))
    fi
done

if [ $attempt -gt $max_attempts ]; then
    echo "‚ùå Sistema n√£o respondeu no tempo esperado."
    echo "Verifique os logs com: docker-compose -f docker-compose.prod.yml logs"
    exit 1
fi

# Executar valida√ß√£o
echo "üîç Executando valida√ß√£o do sistema..."
python scripts/validate.py || echo "‚ö†Ô∏è  Valida√ß√£o falhou - verifique os logs"

echo ""
echo "=================================================="
echo "‚úÖ Deploy Conclu√≠do!"
echo "=================================================="
echo ""
echo "üåê Acesse o sistema em:"
echo "   - API Principal: http://localhost:2024"
echo "   - Dashboard de Monitoramento: http://localhost:2024/monitoring/dashboard"
echo "   - Documenta√ß√£o API: http://localhost:2024/api/docs"
echo "   - LangServe Playground: http://localhost:2024/regulatory/playground"
echo ""
echo "üìä Servi√ßos de Monitoramento:"
echo "   - Prometheus: http://localhost:9090"
echo "   - Grafana: http://localhost:3000 (admin/admin)"
echo ""
echo "üîç Comandos √∫teis:"
echo "   - Ver logs: docker-compose -f docker-compose.prod.yml logs -f"
echo "   - Parar sistema: docker-compose -f docker-compose.prod.yml down"
echo "   - Reiniciar: docker-compose -f docker-compose.prod.yml restart"
echo ""
echo "üß™ Teste o sistema com:"
echo "   curl -X POST http://localhost:2024/api/analyze \\"
echo "     -H \"Content-Type: application/json\" \\"
echo "     -d '{\"query\": \"Regulamenta√ß√µes do Banco Central para fintechs\"}'"
echo ""